#+begin_src sh :results output :exports both
python -m ipykernel install --user --name imgread-aics
#+end_src

* Available options to read microscopy data files
:PROPERTIES:
:header-args:jupyter-python+: :kernel imgread-aics
:END:
** history

First I recap how I developed this package.

Started comparing the available options to read microscopy file.

** preamble
#+begin_src jupyter-python
  import pprint
  pp = pprint.PrettyPrinter()
  import tifffile
  import skimage.io
  import matplotlib
  import matplotlib.pyplot as plt
  print(tifffile.__version__)
  print(skimage.__version__)
  lif = "tests/data/2015Aug28_TransHXB2_50min+DMSO.lif"
  img_tile = "tests/data/t4_1.tif"
  img = "tests/data/exp2_2.tif"
  bt = "/home/dan/fura2018/bigandraw/exp2_2.tf8"
  raw = "/home/dan/fura2018/bigandraw/exp2_2.raw"
  mcts = "tests/data/multi-channel-time-series.ome.tif"
  #+end_src

#+RESULTS:
: 2023.7.10
: 0.21.0
** bfconvert subprocess
http://bioimage-analysis.stanford.edu/guides/3-Loading_microscopy_images/

#+begin_src jupyter-python
  import subprocess
  import tempfile
  output_image = tempfile.NamedTemporaryFile(suffix='.tif')
  image =  ['/home/dan/.progs/bftools/bfconvert', "-overwrite", "-nolookup", img_tile, output_image.name]
  p = subprocess.run(image, stdout=subprocess.PIPE)
  t1 = skimage.io.imread(output_image.name, plugin='tifffile')
  t1.shape
#+end_src

#+RESULTS:
:RESULTS:
: TiffFile.asarray: failed to reshape (180, 256, 512) to (3, 4, 256, 512)
| 15 | 3 | 256 | 512 | 4 |
:END:

** TileSticher
   #+begin_src jupyter-python

     filepath = img_tile
     rdr = bioformats.formatreader.make_image_reader_class()()
     rdr.allowOpenToCheckType(True)

     clsOMEXMLService = javabridge.JClassWrapper('loci.formats.services.OMEXMLService')
     serviceFactory = javabridge.JClassWrapper('loci.common.services.ServiceFactory')()
     service = serviceFactory.getInstance(clsOMEXMLService.klass)
     metadata = service.createOMEXMLMetadata()
     rdr.setMetadataStore(metadata)
     rdr.setId(filepath)



     ts = javabridge.JClassWrapper('loci.formats.TileStitcher')(rdr)
     cs = javabridge.JClassWrapper('loci.formats.ChannelSeparator')(rdr)
     ##is_tile = ts.makeTileStitcher(rdr)
   #+end_src

   #+RESULTS:


   #+begin_src jupyter-python

     rdr.setId(filepath)

     s = 0
     root = metadata.getRoot()
     first_image = root.getImage(s)
     pixels = first_image.getPixels()

     # The plane data isn't in the planes, it's in the tiff data
     for idx in range(pixels.sizeOfTiffDataList()):
         tiffData = pixels.getTiffData(idx)
         c = tiffData.getFirstC().getValue().intValue()
         t = tiffData.getFirstT().getValue().intValue()
         print("TiffData: c=%d, t=%d" % (c, t))
   #+end_src

#+RESULTS:
#+begin_example
  TiffData: c=0, t=0
  TiffData: c=1, t=0
  TiffData: c=2, t=0
  TiffData: c=3, t=0
  TiffData: c=0, t=1
  TiffData: c=1, t=1
  TiffData: c=2, t=1
  TiffData: c=3, t=1
  TiffData: c=0, t=2
  TiffData: c=1, t=2
  TiffData: c=2, t=2
  TiffData: c=3, t=2
#+end_example


# Run lint, mypy, and xdoctest, and pytest with coverage
name: CI

on:
  workflow_dispatch:
  pull_request:
    paths-ignore:
      - "docs/**"
      - "*.md"
  push:
    paths-ignore:
      - "docs/**"
      - "*.md"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  STABLE_PYTHON_VERSION: "3.10"
  # PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"

jobs:
  pre-commit:
    name: Lint
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.STABLE_PYTHON_VERSION }}

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: "adopt"
          java-version: 8

      - name: Display JAVA version
        run: java -version

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ env.STABLE_PYTHON_VERSION }}-${{ hashFiles('**/constraints.txt', '**/pyproject.toml') }}
          enableCrossOsArchive: true

      - name: Install pip and hatch
        run: python -m pip install --constraint=.github/workflows/constraints.txt pip hatch

      - name: Cache pre-commit
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit/
          key: pre-commit|${{ env.STABLE_PYTHON_VERSION }}|${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run lint
        run: hatch run lint

  checks:
    name: Mypy and xdoctest ${{ matrix.python }} on ${{ startsWith(matrix.os, 'macos-') && 'macOS' || startsWith(matrix.os, 'windows-') && 'Windows' || 'Linux' }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python: ["3.10"] # , "3.9", "3.8"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      # - name: Set up JDK 8
      #   uses: actions/setup-java@v4
      #   with:
      #     distribution: "adopt"
      #     java-version: 8
      - name: Install Binaries for Tests (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo add-apt-repository ppa:openjdk-r/ppa
          sudo apt-get update
          sudo apt-get install -y openjdk-8-jdk

      - name: Install Binaries for Docs (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install pandoc plantuml openjdk@8 maven

      - name: Install Binaries for Docs (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install pandoc plantuml jdk8 maven

      - name: Display JAVA version
        run: |
          java -version

      # - name: Cache pip
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.cache/pip
      #     key: ${{ runner.os }}-pip-${{ matrix.python }}-${{ hashFiles('**/constraints.txt') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pip-${{ matrix.python }}-
      #       ${{ runner.os }}-pip-
      #       pip-
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache
            ~/.pip
          key: ${{ matrix.os }}-pip-${{ matrix.python }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-

      - name: Install pip and hatch
        run: |
          python -m pip install --constraint=.github/workflows/constraints.txt pip
          pip install --constraint=.github/workflows/constraints.txt hatch
          pip --version
          hatch --version

      - name: Upgrade setuptools and wheel # pleonastic
        run: |
          pip install --upgrade setuptools wheel

      - name: Install
        run: |
          pip install numpy
          pip install .[tests]

      - name: Run mypy and xdoctest
        run: |
          # hatch run tests.py${{ matrix.python }}:type
          # hatch run tests.py${{ matrix.python }}:xdoc
          mypy src tests docs/conf.py
          python -m xdoctest nima_io all

  tests:
    name: Tests py-${{ matrix.python }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python: ["3.10", "3.9", "3.8"]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: "adopt"
          java-version: 8

      - name: Display JAVA version
        run: java -version

      - id: cache
        uses: actions/cache@v3
        with:
          path: tests/data
          key: ${{ hashFiles('tests/data.filenames.md5') }}
          enableCrossOsArchive: true

      - name: Download tests data files
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          files=("2015Aug28_TransHXB2_50min+DMSO.lif"
                 "LC26GFP_1.tf8"
                 "exp2_2.tif"
                 "im1s1z2c5t_bmd.ome.tif"
                 "im1s1z3c5t_a.ome.tif"
                 "im1s1z3c5t_b.ome.tif"
                 "im1s1z3c5t_bpix.ome.tif"
                 "multi-channel-time-series.ome.tif"
                 "t4_1.tif"
                 "tile6_1.tif")
          for file in "${files[@]}"; do
            wget -P tests/data/ https://gin.g-node.org/darosio/imgread-testdata/raw/master/$file
          done
          echo "files=${files[*]}" >> $GITHUB_OUTPUT

      - id: cache-bftools
        uses: actions/cache@v3
        with:
          path: ./bftools
          key: bftools-5.9.0

      - name: Download and Extract bftools.zip
        if: steps.cache-bftools.outputs.cache-hit != 'true'
        run: |
          curl -LO https://downloads.openmicroscopy.org/bio-formats/5.9.0/artifacts/bftools.zip
          unzip bftools.zip

      - name: Add bftools to PATH
        run: echo "$(pwd)/bftools" >> $GITHUB_PATH

      - name: Run showinf
        run: showinf -version

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python }}-${{ hashFiles('**/constraints.txt', '**/pyproject.toml') }}
          enableCrossOsArchive: true
          # restore-keys: |
          #   ${{ runner.os }}-pip-${{ matrix.python }}-${{ hashFiles('**/constraints.txt', '**/pyproject.toml') }}
          #   ${{ runner.os }}-pip-${{ matrix.python }}-
          #   ${{ runner.os }}-pip-
          #   pip-

      # - name: lists
      #   run: ls -R ~/.cache/pip

      - name: Install pip and hatch
        run: |
          python -m pip install --constraint=.github/workflows/constraints.txt pip hatch numpy

      - name: Run tests and coverage
        run: |
          hatch run tests:test
          hatch run tests:cov

      # - name: Upgrade setuptools and wheel
      #   run: |
      #     pip install --upgrade setuptools wheel
      #     pip install cython

      # - name: Install
      #   run: |
      #     pip install numpy
      #     pip install --use-pep517 .[tests]

      # - name: Run test and coverage
      #   run: |
      #     coverage run -p -m pytest -v -k cli
      #     coverage run -p -m pytest -v -k jpype
      #     coverage run -p -m pytest -v -k read
      #     coverage combine
      #     coverage report
      #     coverage xml

      - name: Upload coverage report
        uses: codecov/codecov-action@v3.1.4

  testpypi:
    needs: [pre-commit, checks, tests]
    runs-on: ubuntu-latest
    if: "startsWith(github.event.head_commit.message, 'bump:')"
    outputs:
      version: ${{ steps.version.outputs.ver }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
      - name: Set up Python ${{ env.STABLE_PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.STABLE_PYTHON_VERSION }}
      - name: Get version
        id: version
        run: |
          echo ${{ github.event.head_commit.message }}
          ver=`echo ${{ github.event.head_commit.message }} | awk '{ print $NF }'`
          echo "ver=${ver}" >> $GITHUB_OUTPUT
          echo "ver=${ver}" >> $GITHUB_ENV
      - name: Run a CLI
        run: |
          python -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ nima_io==${{ env.ver }}
          imgdiff --version

  release:
    name: Release to GitHub
    needs: testpypi
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          # bodyFile: "release.md"
          tag: v${{ needs.testpypi.outputs.version }}

  publish:
    name: Publish to PyPI
    needs: testpypi
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
      - name: Set up Python ${{ env.STABLE_PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.STABLE_PYTHON_VERSION }}
      - name: Build and publish
        run: |
          pipx run hatch build
          pipx run hatch publish --user=__token__ --auth=${{ secrets.PYPI_TOKEN }}

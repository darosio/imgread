# Run lint, mypy, and xdoctest, and pytest with coverage
name: CI

on:
  workflow_dispatch:
  pull_request:
    paths-ignore:
      - "docs/**"
      - "*.md"
  push:
    paths-ignore:
      - "docs/**"
      - "*.md"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  STABLE_PYTHON_VERSION: "3.11"
  # PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"

jobs:
  pre-commit:
    name: Lint
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python-${{ env.STABLE_PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.STABLE_PYTHON_VERSION }}

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: "adopt"
          java-version: 8

      - name: Display JAVA version
        run: java -version

      - name: Cache pip
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}|pip|${{ env.STABLE_PYTHON_VERSION }}|${{ hashFiles('**/constraints.txt', '**/pyproject.toml') }}
          enableCrossOsArchive: true

      - name: Install pip and hatch
        run: python -m pip install --constraint=.github/workflows/constraints.txt pip hatch

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit/
          key: pre-commit|${{ env.STABLE_PYTHON_VERSION }}|${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run lint
        run: hatch run lint

  tests:
    name: ${{ matrix.tests }} py-${{ matrix.python }} on ${{ startsWith(matrix.os, 'macos-') && 'macOS' || startsWith(matrix.os, 'windows-') && 'Windows' || 'Linux' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest] # , windows-latest
        python: ["3.12", "3.11", "3.10"]
        tests: [pytest, mypy, xdoc]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python-${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: "adopt"
          java-version: 8

      - name: Display JAVA version
        run: java -version

      - name: Cache tests/data
        id: cache-data
        uses: actions/cache@v4
        with:
          path: tests/data
          key: ${{ hashFiles('tests/data.filenames.md5') }}
          enableCrossOsArchive: true

      - name: Download tests data files
        if: steps.cache-data.outputs.cache-hit != 'true' && matrix.tests != 'mypy'
        shell: bash
        run: |
          base_url="https://gin.g-node.org/darosio/imgread-testdata/raw/master/"
          wget -P tests/data/ -i tests/data.filenames.txt -B "$base_url"
          files=($(<tests/data.filenames.txt))
          echo "files=${files[*]}" >> $GITHUB_OUTPUT

      - name: List cached data files
        if: "!startsWith(matrix.os , 'windows-')"
        run: |
          echo "Listing files in tests/data"
          ls -a tests/data

      - name: Cache pip
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}|pip|${{ matrix.python }}|-${{ hashFiles('**/constraints.txt', '**/pyproject.toml') }}
          enableCrossOsArchive: true

      - name: Install pip and hatch
        run: |
          python -m pip install --constraint=.github/workflows/constraints.txt pip hatch

      - name: Run pytest and coverage
        if: matrix.tests == 'pytest'
        run: hatch run tests.py${{ matrix.python }}:test

      - name: Run coverage
        if: matrix.tests == 'pytest'
        run: hatch run tests.py${{ matrix.python }}:cov

      - name: Upload coverage report
        if: matrix.tests == 'pytest'
        uses: codecov/codecov-action@v4.3.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Run mypy
        if: matrix.tests == 'mypy'
        run: hatch run tests.py${{ matrix.python }}:type

      - name: Run xdoctest
        if: matrix.tests == 'xdoc'
        run: hatch run tests.py${{ matrix.python }}:xdoc

  testpypi:
    needs: [pre-commit, tests]
    runs-on: ubuntu-latest
    if: "startsWith(github.event.head_commit.message, 'bump:')"
    outputs:
      version: ${{ steps.version.outputs.ver }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python-${{ env.STABLE_PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.STABLE_PYTHON_VERSION }}

      - name: Get version
        id: version
        run: |
          echo ${{ github.event.head_commit.message }}
          ver=`echo ${{ github.event.head_commit.message }} | awk '{ print $NF }'`
          echo "ver=${ver}" >> $GITHUB_OUTPUT
          echo "ver=${ver}" >> $GITHUB_ENV

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: "adopt"
          java-version: 8

      - name: Cache pip
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}|pip|${{ env.STABLE_PYTHON_VERSION }}|${{ hashFiles('**/constraints.txt', '**/pyproject.toml') }}
          enableCrossOsArchive: true

      - name: Install pip
        run: python -m pip install --constraint=.github/workflows/constraints.txt pip

      - name: Run a CLI
        run: |
          python -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ nima_io==${{ env.ver }}
          imgdiff --version

  release:
    name: Release to GitHub
    needs: testpypi
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          # bodyFile: "release.md"
          tag: v${{ needs.testpypi.outputs.version }}

  publish:
    name: Publish to PyPI
    needs: testpypi
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.STABLE_PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.STABLE_PYTHON_VERSION }}

      - name: Build and publish
        run: |
          pipx run hatch build
          pipx run hatch publish --user=__token__ --auth=${{ secrets.PYPI_TOKEN }}

  # Define a job to check if the docs workflow has finished without errors
  check_docs:
    needs: [pre-commit] # This job does not depend on any other job in this workflow
    runs-on: ubuntu-latest
    steps:
      - name: Check docs workflow status
        uses: actions/github-script@v7
        with:
          script: |
            const run = context.payload.workflow_run;
            if (run && run.conclusion === 'success') {
              console.log('Docs workflow completed successfully');
              core.exportVariable('RESULT', 'success');
            } else {
              console.error('Docs workflow failed');
              core.exportVariable('RESULT', 'failure');
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # check_docs:
  #   name: Check Docs
  #   runs-on: ubuntu-latest
  #   # outputs:
  #   #   result: ${{ steps.check.outputs.result }}
  #   steps:
  #     - name: Check docs workflow
  #       id: check
  #       uses: actions/github-script@v7
  #       with:
  #         script: |
  #           try {
  #             const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               workflow_id: 'docs.yml',
  #               status: 'completed',
  #               per_page: 1,
  #             });
  #             const run = runs.workflow_runs[0];
  #             if (run && run.conclusion === 'success') {
  #               console.log('Docs workflow completed successfully');
  #               core.exportVariable('RESULT', 'success');
  #             } else {
  #               console.error('Docs workflow failed');
  #               core.exportVariable('RESULT', 'failure');
  #             }
  #           } catch (error) {
  #             console.error('Error:', error.message);
  #             core.exportVariable('RESULT', 'error');
  #           }
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # steps:
  #   - name: Check docs workflow
  #     uses: actions/github-script@v7
  #     with:
  #       script: |
  #         try {
  #           const { data: runs } = await github.actions.listRepoWorkflowRuns({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             workflow_file_name: 'docs.yml',
  #             status: 'completed',
  #             per_page: 1,
  #           });
  #           const run = runs[0];
  #           if (run && run.conclusion === 'success') {
  #             console.log('Docs workflow completed successfully');
  #             return 'success';
  #           } else {
  #             console.error('Docs workflow failed');
  #             return 'failure';
  #           }
  #         } catch (error) {
  #           console.error('Error:', error.message);
  #           return 'error';
  #         }
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       DEBUG: false
  #       USER_AGENT: actions/github-script
  #       RESULT_ENCODING: json
  #       RETRIES: 0
  #       RETRY_EXEMPT_STATUS_CODES:
  #         "400,401,403,404,422"

  # const { data: runs } = await github.actions.listRepoWorkflowRuns({
  #   owner: context.repo.owner,
  #   repo: context.repo.repo,
  #   workflow_file_name: 'docs.yml',
  #   status: 'completed',
  #   per_page: 1,
  # });
  # const run = runs[0];
  # if (run.conclusion === 'success') {
  #   console.log('Docs workflow completed successfully');
  #   return 'success';
  # } else {
  #   console.error('Docs workflow failed');
  #   return 'failure';
  # }

  # auto_merge:
  #   name: Auto Merge Dependabot PRs
  #   needs: [pre-commit, tests, check_docs]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Auto merge
  #       # if: ${{ needs.ci.result == 'success' && needs.check_docs.outputs.result == 'success' }}
  #       uses: pascalgn/automerge-action@v0.16.3
  #       env:
  #         GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
  #         MERGE_LABELS: dependencies
  #         MERGE_METHOD: squash
  #         MERGE_FORKS: false
  #         UPDATE_LABELS: dependencies
  #         # DELETE_BRANCH_AFTER_MERGE: true

  auto_merge_deps:
    name: Auto Merge dependencies labeled PRs
    needs: [pre-commit, tests, check_docs]
    if: ${{ contains(github.event.pull_request.labels.*.name, 'dependencies') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Auto merge
        run: |
          echo "Merging..."
          # gh pr merge --squash --delete-branch
          gh pr merge --squash

* reading 
** preamble
   #+begin_src ipython :session :results value pp 
     import skimage.io
     import matplotlib
     import matplotlib.pyplot as plt
     %matplotlib inline
     lif = "../tests/data/2015Aug28_TransHXB2_50min+DMSO.lif"
     img_tile = "../tests/data/t4_1.tif"
     img = "../tests/data/exp2_2.tif"

     bt = "/home/dan/fura2018/bigandraw/exp2_2.tf8"
     raw = "/home/dan/fura2018/bigandraw/exp2_2.raw"

     mcts = "../tests/data/multi-channel-time-series.ome.tif"
   #+end_src

   #+RESULTS:
   : # Out[12]:

** using skimage 
   #+begin_src ipython :session :results pp
     t1 = skimage.io.imread(img_tile, plugin='tifffile')
     t1.shape
   #+end_src

   #+RESULTS:
   : # Out[13]:
   : : (180, 256, 512)

   #+begin_src ipython :session :results output
     c1 = skimage.io.imread(img, plugin='tifffile')
     print("Shape: ", c1.shape)
     print("A value: ", c1[161][520, 610])
     print("Max: ", c1[160].max(), c1[161].max())
   #+end_src

   #+RESULTS:
   : Shape:  (162, 1200, 1600)
   : A value:  132
   : Max:  212 184
   
   #+begin_src ipython :session :results output raw
     skimage.io.imshow(c1[0])
   #+end_src

   #+RESULTS:
   /home/dan/.local/lib/python3.6/site-packages/skimage/io/_plugins/matplotlib_plugin.py:77: UserWarning: Low image data range; displaying image with stretched contrast.
     warn("Low image data range; displaying image with "
   # Out[21]:
   : <matplotlib.image.AxesImage at 0x7f5f8f9551d0>
   [[file:./obipy-resources/aAXkTG.png]]

** bfconvert subprocess
 #+begin_src python :session :results output :exports raw drawer
   import subprocess
   import tempfile

   output_image = tempfile.NamedTemporaryFile(suffix='.tif')
   cmd = ['bfconvert', "-overwrite", "-nolookup", img, output_image.name]
   p = subprocess.run(cmd, stdout=subprocess.PIPE)
   c0 = skimage.io.imread(output_image.name, plugin='tifffile')
   print("Shape: ", c0.shape)
 #+end_src

 #+RESULTS:
 : Shape:  (81, 1, 2, 1200, 1600)


** pims
   Warning:
   This is in conflict with javabridge.
   #+begin_src ipython :session pims :results output :exports raw drawer
     import pims

     lif = "../tests/data/2015Aug28_TransHXB2_50min+DMSO.lif"
     img_tile = "../tests/data/t4_1.tif"
     img = "../tests/data/exp2_2.tif"

     rdr = pims.Bioformats(img_tile)
     meta = rdr.metadata
     # pims.bioformats.jpype.shutdownJVM()
     len(meta.fields), meta.fields
   #+end_src

   #+RESULTS:
   : Traceback (most recent call last):
   :   File "<stdin>", line 1, in <module>
   :   File "/tmp/babel-FPCkto/python-qrWys8", line 1, in <module>
   :     import pims
   : ModuleNotFoundError: No module named 'pims'
   
#+begin_src python :session pims:results both :exports raw drawer
  md = rdr.metadata
  md.PixelsSizeX(15)
#+end_src

#+begin_src python :session :results both :exports raw drawer
getattr(md, "ImageAcquisitionDate")(0)
#+end_src

#+RESULTS:
: 2016-06-24T10:40:22

#+begin_src python :session :results both :exports raw drawer
rdr[2]
#+end_src

#+RESULTS:
| (6149 6455 6252 ... 32864 32428 32191) | (5988 6450 6789 ... 33718 33121 32606) | (6067 6710 6462 ... 34086 33430 32612) | ... | (22080 23667 23982 ... 23699 23475 22627) | (21504 23674 24423 ... 23855 23685 23146) | (22126 24013 23813 ... 24377 24263 23465) |
** mmina 
#+begin_src python :session :results output :exports raw drawer
  import bioformats
  import javabridge

  javabridge.start_vm(class_path=bioformats.JARS)

  img_tile = "../tests/data/t4_1.tif"
  omexmlstr = bioformats.get_omexml_metadata(img_tile)
  #o = bioformats.omexml.OMEXML(omexmlstr)

  # sr=0
  # (o.get_image_count(),
  #  [o.image(sr).Pixels.SizeC,
  #   o.image(sr).Pixels.get_plane_count(),
  #   o.image(sr).Pixels.SizeX,
  #   o.image(sr).Pixels.SizeY,
  #   o.image(sr).Pixels.SizeT,
  #   o.image(sr).AcquisitionDate,
  #   o.image(sr).Pixels.PhysicalSizeX
  #  ])

  # ins = o.instrument()
  # dec = ins.Detector
  # print(dec)
#+end_src

#+RESULTS:
#+begin_example
Failed to get class loci/common/RandomAccessInputStream
Exception in thread "Thread-0" java.lang.NoClassDefFoundError: loci/common/RandomAccessInputStream
Caused by: java.lang.ClassNotFoundException: loci.common.RandomAccessInputStream
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/tmp/babel-R0MIze/python-Zs1yhQ", line 7, in <module>
    omexmlstr = bioformats.get_omexml_metadata(img_tile)
  File "/home/dan/.local/lib/python3.6/site-packages/bioformats/formatreader.py", line 1019, in get_omexml_metadata
    with ImageReader(path=path, url=url, perform_init=False) as rdr:
  File "/home/dan/.local/lib/python3.6/site-packages/bioformats/formatreader.py", line 626, in __init__
    self.path)
  File "/home/dan/.local/lib/python3.6/site-packages/javabridge/jutil.py", line 1715, in make_instance
    raise JavaException(jexception)
javabridge.jutil.JavaException: loci/common/RandomAccessInputStream
#+end_example

** BF method
#+begin_src python :session :results both :exports raw drawer
import javabridge
import bioformats
jars = bioformats.JARS + ["/home/dan/.progs/Fiji.app/jars/ij-1.52d.jar"]
#javabridge.start_vm(class_path=jars, run_headless=True)
javabridge.start_vm(class_path=jars)

BF = javabridge.JClassWrapper('loci.plugins.BF')

importer_options = javabridge.JClassWrapper('loci.plugins.in.ImporterOptions')
options = importer_options()
options.setStitchTiles(True)
options.doStitchTiles()

imp = BF.openImagePlus(img_tile)
#+end_src

#+RESULTS:
: True
** TileSticher
   #+begin_src python :session :results both :exports raw drawer
   
     filepath = img_tile
     rdr = bioformats.formatreader.make_image_reader_class()()
     rdr.allowOpenToCheckType(True)

     clsOMEXMLService = javabridge.JClassWrapper('loci.formats.services.OMEXMLService')
     serviceFactory = javabridge.JClassWrapper('loci.common.services.ServiceFactory')()
     service = serviceFactory.getInstance(clsOMEXMLService.klass)
     metadata = service.createOMEXMLMetadata()
     rdr.setMetadataStore(metadata)
     rdr.setId(filepath)



     ts = javabridge.JClassWrapper('loci.formats.TileStitcher')(rdr)
     cs = javabridge.JClassWrapper('loci.formats.ChannelSeparator')(rdr)
     ##ist = ts.makeTileStitcher(rdr)
   #+end_src

   #+RESULTS:
   

   #+begin_src python :session :results output :exports raw drawer
   
     rdr.setId(filepath)

     s = 0
     root = metadata.getRoot()
     first_image = root.getImage(s)
     pixels = first_image.getPixels()

     # The plane data isn't in the planes, it's in the tiff data
     for idx in range(pixels.sizeOfTiffDataList()):
         tiffData = pixels.getTiffData(idx)
         c = tiffData.getFirstC().getValue().intValue()
         t = tiffData.getFirstT().getValue().intValue()
         print("TiffData: c=%d, t=%d" % (c, t))
   #+end_src

#+RESULTS:
#+begin_example
12:10:15.692 [Thread-0] INFO  loci.formats.ImageReader - OMETiffReader initializing ../tests/data/t4_1.tif
12:10:15.692 [Thread-0] DEBUG loci.formats.FormatHandler - OMETiffReader initializing ../tests/data/t4_1.tif
TiffData: c=0, t=0
TiffData: c=1, t=0
TiffData: c=2, t=0
TiffData: c=3, t=0
TiffData: c=0, t=1
TiffData: c=1, t=1
TiffData: c=2, t=1
TiffData: c=3, t=1
TiffData: c=0, t=2
TiffData: c=1, t=2
TiffData: c=2, t=2
TiffData: c=3, t=2
#+end_example
** prova
   
#+BEGIN_SRC elisp :results output :session ipims2
  (pyvenv-workon "imgread-dev")
  ;; (pyvenv-activate "~/kk")
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sh :session ipims
echo $VIRTUAL_ENV
which python
which ipython
#+END_SRC

#+RESULTS:
|                                          |
| /home/dan/.venvs/imgread-dev             |
| /home/dan/.venvs/imgread-dev/bin/python  |
| /home/dan/.venvs/imgread-dev/bin/ipython |

#+begin_src ipython :results output  :session kernel-17597.json
  import pims
  print("hello")
  # print(a)
  b = [3, 4]
#+end_src

#+RESULTS:
: hello
: (2, 3, 4)

#+BEGIN_SRC ipython :results drawer :async t :session ipims2
  %matplotlib inline
  import numpy as np
  import matplotlib.pyplot as plt
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[1]:
:END:

#+BEGIN_SRC ipython :results drawer :async t :session ipims
  fig=plt.figure(facecolor='white')
  plt.hist(np.random.randn(500000), bins=100);
#+END_SRC

#+RESULTS:
:RESULTS:
0 - e65a1f1e-f97b-4f8b-94f9-d3ad8da630b9
:END:


#+BEGIN_SRC sh :results output :session pims3
  activate ~/.venvs/imgread-dev
#+END_SRC

#+RESULTS:
: sh: /home/dan/.venvs/imgread-dev/bin/activate: Permission denied


#+begin_src ipython :session pims3
  import pims
  print("hello")
#+end_src

* Creating a Python virtual environment
  :PROPERTIES:
  :header-args: :eval never-export
  :header-args:bash: :exports code
  :header-args:elisp: :exports code
  :header-args:ipython: :exports both :session kernel-18588.json :results output
  :END:
  
#+begin_src ipython 
  import pims
  print("hello")
  # print(a)
  b = [3, 4]
#+end_src

#+RESULTS:
: hello

#+begin_src ipython :results both 
print(b)
#+end_src 

#+RESULTS:
: [3, 4]

